const assert = require('assert');
const { Web3 } = require('web3');

// Import ABI and Compiler Contract
const { abi, evm } = require('../compile');

// Ganache is Local Testnet
const ganache = require('ganache');

// New Web3 Instance with provider that instructs Web3 to what network it is connecting to
const web3 = new Web3(ganache.provider());

// Accounts generated by Ganache Testnet
let accounts;
let inbox;
let defaultInitialMessage = "azzyr";

beforeEach(async () => {
  // Get a list of all accoutns
  accounts = await web3.eth.getAccounts();

  // Use one of those accounts to deploy the contract
  inbox = await new web3.eth.Contract(abi)
    .deploy({ 
      data: evm.bytecode.object, 
      arguments: [defaultInitialMessage] 
    })
    .send({ 
      from: accounts[0], 
      gas: '1000000'
    });
});

describe('Inbox', () => {
  // Test Case #1
  it('deploys a contract', () => assert.ok(inbox.options.address));

  // Test Case #2
  it('has a default message', async () => {
    // Calling method from Contract
    const message = await inbox.methods.message().call();
    assert.equal(message, defaultInitialMessage);
  });

  // Test Case #3
  it('can change the message', async () => {
    await inbox.methods.setMessage(defaultInitialMessage + 'test').send({ 
      from: accounts[0]
    });
    const message = await inbox.methods.message().call();
    assert.equal(message, defaultInitialMessage + 'test');
  });
})